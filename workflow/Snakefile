import pandas as pd

configfile: "config/config.yaml"

samples = list(pd.read_table(config["samples"]).set_index("sample", drop=False)["sample"])

rule mutect2_filtering:
    input:
        "results/1_mutect2/raw/Mutect2_filtered_{sample}.vcf.gz"
    output:
        spm="results/1_mutect2/filtered/{sample}.mutect2.spm.filtered.vcf.gz",
        sim="results/1_mutect2/filtered/{sample}.mutect2.sim.filtered.vcf.gz"
    shell:
        "workflow/scripts/somatic_variant_filtering.py -f {input} -o {output.spm},{output.sim} --spim_separate"

rule strelka_filtering:
    input:
        spm="results/2_strelka/raw/StrelkaBP_{sample}_somatic_snvs.vcf.gz",
        sim="results/2_strelka/raw/StrelkaBP_{sample}_somatic_indels.vcf.gz"
    output:
        spm="results/2_strelka/filtered/{sample}.strelka.spm.filtered.vcf.gz",
        sim="results/2_strelka/filtered/{sample}.strelka.sim.filtered.vcf.gz"
    shell:
        "workflow/scripts/somatic_variant_filtering.py -f {input.spm},{input.sim} -o {output.spm},{output.sim} --spim_separate"

rule strelka2bed:
    input:
        spm="results/2_strelka/filtered/{sample}.strelka.spm.filtered.vcf.gz",
        sim="results/2_strelka/filtered/{sample}.strelka.sim.filtered.vcf.gz"
    output:
        spm="results/2_strelka/filtered_bed/{sample}.strelka.spm.filtered.sorted.bed",
        sim="results/2_strelka/filtered_bed/{sample}.strelka.sim.filtered.sorted.bed"
    shell:
        """
        # Convert spm vcfs to bed files
        printf "#CHROM\tSTART\tSTOP\n" > {output.spm}
        zcat {input.spm} | convert2bed -i vcf --snvs | cut -f1-3 | sort -k1,1 -k2,2n >> {output.spm}

        # Convert sim vcfs to bed files
        printf "#CHROM\tSTART\tSTOP\n" > {output.sim}
        zcat {input.sim} | convert2bed -i vcf --insertions | cut -f1-3 | sort -k1,1 -k2,2n >> {output.sim}
        zcat {input.sim} | convert2bed -i vcf --deletions | cut -f1-3 | sort -k1,1 -k2,2n >> {output.sim}

        """

rule intersect:
    input:
        spm_vcf="results/1_mutect2/filtered/{sample}.mutect2.spm.filtered.vcf.gz",
        sim_vcf="results/1_mutect2/filtered/{sample}.mutect2.sim.filtered.vcf.gz",
        spm_bed="results/2_strelka/filtered_bed/{sample}.strelka.spm.filtered.sorted.bed",
        sim_bed="results/2_strelka/filtered_bed/{sample}.strelka.sim.filtered.sorted.bed" 
    output: 
        spm="results/3_mutect2_strelka_intersect/{sample}.mutect2.strelka.spm.filtered.intersect.vcf.gz",
        sim="results/3_mutect2_strelka_intersect/{sample}.mutect2.strelka.sim.filtered.intersect.vcf.gz"
    shadow: "full"
    shell:
        """
        vcftools --gzvcf {input.spm_vcf} --bed {input.spm_bed} --recode --recode-INFO-all --stdout | gzip -c > {output.spm}
        vcftools --gzvcf {input.sim_vcf} --bed {input.sim_bed} --recode --recode-INFO-all --stdout | gzip -c > {output.sim}
        """

if config['germline_filter']:

    rule germline_filtering:
        input:
            spm="results/3_mutect2_strelka_intersect/{sample}.mutect2.strelka.spm.filtered.intersect.vcf.gz",
            sim="results/3_mutect2_strelka_intersect/{sample}.mutect2.strelka.sim.filtered.intersect.vcf.gz",
            germl_spm = config['germline_data']['spm'],
            germl_sim = config['germline_data']['sim']
        output:
            spm="results/4_germline_filtered/{sample}.mutect2.strelka.spm.filtered.intersect.germl.vcf.gz",
            sim="results/4_germline_filtered/{sample}.mutect2.strelka.sim.filtered.intersect.germl.vcf.gz"
        shadow: "full"
        shell:
            """
            vcftools --gzvcf {input.spm} --bed {input.germl_spm} --recode --recode-INFO-all --stdout | gzip -c > {output.spm}
            vcftools --gzvcf {input.sim} --bed {input.germl_sim} --recode --recode-INFO-all --stdout | gzip -c > {output.sim}
            """

    rule sample_summary:
        input:
            m2_raw="results/1_mutect2/raw/Mutect2_filtered_{sample}.vcf.gz",
            m2_filt_spm="results/1_mutect2/filtered/{sample}.mutect2.spm.filtered.vcf.gz",
            m2_filt_sim="results/1_mutect2/filtered/{sample}.mutect2.sim.filtered.vcf.gz",
            st_raw_spm="results/2_strelka/raw/StrelkaBP_{sample}_somatic_snvs.vcf.gz",
            st_raw_sim="results/2_strelka/raw/StrelkaBP_{sample}_somatic_indels.vcf.gz",
            st_filt_spm="results/2_strelka/filtered/{sample}.strelka.spm.filtered.vcf.gz",
            st_filt_sim="results/2_strelka/filtered/{sample}.strelka.sim.filtered.vcf.gz",
            intersect_spm="results/3_mutect2_strelka_intersect/{sample}.mutect2.strelka.spm.filtered.intersect.vcf.gz",
            intersect_sim="results/3_mutect2_strelka_intersect/{sample}.mutect2.strelka.sim.filtered.intersect.vcf.gz",
            germl_spm="results/4_germline_filtered/{sample}.mutect2.strelka.spm.filtered.intersect.germl.vcf.gz",
            germl_sim="results/4_germline_filtered/{sample}.mutect2.strelka.sim.filtered.intersect.germl.vcf.gz"
        output:
            "results/summary/samples/{sample}.vcf_summary.tsv"
        shell:
            """
            workflow/scripts/sample_summary.vcf_filtering.py --sample {wildcards.sample} \
            --m2_raw {input.m2_raw} --m2_filt {input.m2_filt_spm},{input.m2_filt_sim} \
            --st_raw {input.st_raw_spm},{input.st_raw_sim} --st_filt {input.st_filt_spm},{input.st_filt_sim} \
            --intersect {input.intersect_spm},{input.intersect_sim} \
            --germl {input.germl_spm},{input.germl_sim} -o {output}
            """
else:
    rule sample_summary:
        input:
            m2_raw="results/1_mutect2/raw/Mutect2_filtered_{sample}.vcf.gz",
            m2_filt_spm="results/1_mutect2/filtered/{sample}.mutect2.spm.filtered.vcf.gz",
            m2_filt_sim="results/1_mutect2/filtered/{sample}.mutect2.sim.filtered.vcf.gz",
            st_raw_spm="results/2_strelka/raw/StrelkaBP_{sample}_somatic_snvs.vcf.gz",
            st_raw_sim="results/2_strelka/raw/StrelkaBP_{sample}_somatic_indels.vcf.gz",
            st_filt_spm="results/2_strelka/filtered/{sample}.strelka.spm.filtered.vcf.gz",
            st_filt_sim="results/2_strelka/filtered/{sample}.strelka.sim.filtered.vcf.gz",
            intersect_spm="results/3_mutect2_strelka_intersect/{sample}.mutect2.strelka.spm.filtered.intersect.vcf.gz",
            intersect_sim="results/3_mutect2_strelka_intersect/{sample}.mutect2.strelka.sim.filtered.intersect.vcf.gz"
        output:
            "results/summary/samples/{sample}.vcf_summary.tsv"
        shell:
            """
            workflow/scripts/sample_summary.vcf_filtering.py --sample {wildcards.sample} \
            --m2_raw {input.m2_raw} --m2_filt {input.m2_filt_spm},{input.m2_filt_sim} \
            --st_raw {input.st_raw_spm},{input.st_raw_sim} --st_filt {input.st_filt_spm},{input.st_filt_sim} \
            --intersect {input.intersect_spm},{input.intersect_sim} -o {output}
            """

rule summary:
    input:
        expand("results/summary/samples/{sample}.vcf_summary.tsv", sample=samples)
    output:
        "results/summary/filtering.vcf_summary.tsv"
    shell:
        "workflow/scripts/total_summary.vcf_filtering.py {output} {input}"

rule all:
    input:
        "results/summary/filtering.vcf_summary.tsv"